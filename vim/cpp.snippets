##
## BASICS
# Main template
snippet qq
	#include <iostream>

	using namespace std;

	int main(int argc, const char *argv[])
	{
		${0}

		return 0;
	}
snippet main
	int main(int argc, const char *argv[])
	{
		${0}

		return 0;
	}
# #include "..."
snippet inc
	#include "${1:<iostream>}"
	${2}
# using namespace std
snippet std
	using namespace std;
extends c
# std::array
snippet arr
	${1:int} ${2:array}[${3:SIZE}]
## CONTROL STATEMENTS
# if
snippet if
	if (${1:true}) 
	{
		${2}
	}
snippet ife
	if (${1:true}) 
	{
		${2}
	} 
	else 
	{
		${3}
	}

	${4}
# else
snippet el
	else 
	{
		${0}
	}
# else if
snippet elif
	else if (${0:true}) 
	{
		${1}
	}
	${3}
# switch
snippet switch
	switch (${1:choice}) 
	{
		case ${2:1}:
			${3}
			break;
		case ${4:2}:
			${5}
			break;
		default:
			${6}
			break;
	}
# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
## LOOPS
# for
snippet for
	for (short ${1:i} = 0; $1 < ${2:count}; ${3:++}$1) 
	{
		${4}
	}
	${5}
# while
snippet wh
	while (${1}) 
	{
		${2}
	}
# do while
snippet do
	do 
	{
		${2}
	} while (${1:/* condition */});
##
## Input/Output
# std::cout
snippet c
	cout << ${1} << endl;
	${2}
# std::cin
snippet ci
	cin >> ${1};
	${2}
##
## Functions
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4}
	}
snippet fund
	${1:void} ${2:function_name}(${3});
	${4}
## TYPES
# std::vector
snippet vector
	vector<${1:T}> ${2};
	${3}
# std::deque
snippet deque
	std::deque<${1:T}> ${2};
# std::forward_list
snippet flist
	std::forward_list<${1:T}> ${2};
# std::list
snippet list
	std::list<${1:T}> ${2};
# std::set
snippet set
	std::set<${1:T}> ${2};
# std::map
snippet map
	std::map<${1:Key}, ${2:T}> ${3};
# std::multiset
snippet mset
	std::multiset<${1:T}> ${2};
# std::multimap
snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};
# std::unordered_set
snippet uset
	std::unordered_set<${1:T}> ${2};
# std::unordered_map
snippet umap
	std::unordered_map<${1:Key}, ${2:T}> ${3};
# std::unordered_multiset
snippet umset
	std::unordered_multiset<${1:T}> ${2};
# std::unordered_multimap
snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
# std::stack
snippet stack
	std::stack<${1:T}> ${2};
# std::queue
snippet queue
	std::queue<${1:T}> ${2};
# std::priority_queue
snippet pqueue
	std::priority_queue<${1:T}> ${2};
##
## Access Modifiers
# private
snippet pri
	private ${1}
	{2}
# protected
snippet pro
	protected ${1}
	${2}
# public
snippet pub
	public {1}
	${2}
# friend
snippet fr
	friend {1}
	{2}
# mutable
snippet mu
	mutable
##
## Class
# class
snippet cl
	class ${1:ClassName}
	{
	public:
		$1(${2})
		{
			${3}
		}
		~$1()
		{
			${4}
		}
	private:
		${5:}
	};
# member function implementation
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
# namespace
snippet ns
	namespace ${1:`vim_snippets#Filename('', 'my')`} {
		${0}
	} /* namespace $1 */
# iterator
snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}

# auto iterator
snippet itera
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}
##
## Lambdas
# lamda (one line)
snippet ld
	[${1}](${2}){${3}}
# lambda (multi-line)
snippet lld
	[${1}](${2}){
		${3}
	}
